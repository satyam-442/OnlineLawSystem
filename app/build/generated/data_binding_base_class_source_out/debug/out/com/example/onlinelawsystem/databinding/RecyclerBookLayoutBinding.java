// Generated by view binder compiler. Do not edit!
package com.example.onlinelawsystem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.onlinelawsystem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecyclerBookLayoutBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView recyclerBookDownload;

  @NonNull
  public final TextView recyclerBookSummary;

  @NonNull
  public final TextView recyclerBookTitle;

  @NonNull
  public final TextView recyclerBookTopics;

  private RecyclerBookLayoutBinding(@NonNull CardView rootView,
      @NonNull ImageView recyclerBookDownload, @NonNull TextView recyclerBookSummary,
      @NonNull TextView recyclerBookTitle, @NonNull TextView recyclerBookTopics) {
    this.rootView = rootView;
    this.recyclerBookDownload = recyclerBookDownload;
    this.recyclerBookSummary = recyclerBookSummary;
    this.recyclerBookTitle = recyclerBookTitle;
    this.recyclerBookTopics = recyclerBookTopics;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static RecyclerBookLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecyclerBookLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recycler_book_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecyclerBookLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.recyclerBookDownload;
      ImageView recyclerBookDownload = ViewBindings.findChildViewById(rootView, id);
      if (recyclerBookDownload == null) {
        break missingId;
      }

      id = R.id.recyclerBookSummary;
      TextView recyclerBookSummary = ViewBindings.findChildViewById(rootView, id);
      if (recyclerBookSummary == null) {
        break missingId;
      }

      id = R.id.recyclerBookTitle;
      TextView recyclerBookTitle = ViewBindings.findChildViewById(rootView, id);
      if (recyclerBookTitle == null) {
        break missingId;
      }

      id = R.id.recyclerBookTopics;
      TextView recyclerBookTopics = ViewBindings.findChildViewById(rootView, id);
      if (recyclerBookTopics == null) {
        break missingId;
      }

      return new RecyclerBookLayoutBinding((CardView) rootView, recyclerBookDownload,
          recyclerBookSummary, recyclerBookTitle, recyclerBookTopics);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
